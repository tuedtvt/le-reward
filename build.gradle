plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'pmd'
	id 'org.openapi.generator' version '5.2.1' apply true
	id "org.sonarqube" version "3.3"
}

group = 'com.ptc.loyalty'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	springCloudVersion = "2020.0.1"
	mapstructVersion = "1.4.2.Final"
	lombokMapstructVersion = "0.2.0"
	swaggerVersion = "1.5.0"
	springfoxVersion = "2.9.2"
	mongockVersion = "4.3.4"
	mongodbDriverSyncVersion = "4.0.5"
	commonLangVersion = "3.12.0"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructVersion}"
	implementation "com.github.cloudyrock.mongock:mongock-bom:${mongockVersion}"
	implementation "com.github.cloudyrock.mongock:mongock-spring-v5:${mongockVersion}"
	implementation "com.github.cloudyrock.mongock:mongodb-springdata-v3-driver:${mongockVersion}"
	implementation "org.mongodb:mongodb-driver-sync:${mongodbDriverSyncVersion}"
	implementation "org.apache.commons:commons-lang3:${commonLangVersion}"
	implementation "io.swagger:swagger-annotations:${swaggerVersion}"
	implementation "io.springfox:springfox-swagger2:${springfoxVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	compileOnly 'org.projectlombok:lombok'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

pmd {
	consoleOutput = true
	ignoreFailures = false
	toolVersion = "6.37.0"
	rulesMinimumPriority = 5
	ruleSets = [file("quality/pmd.xml")]
}

openApiGenerate {
	generatorName = "spring"
	library = "spring-boot"
	inputSpec = "$projectDir/src/main/resources/api/api.yaml".toString()
	apiPackage = "com.ptc.loyalty.api.gen"
	modelPackage = "com.ptc.loyalty.api.gen.model"
	apiFilesConstrainedTo = [""]
	modelFilesConstrainedTo = [""]
	configOptions = [
			dateLibrary: "java8",
			interfaceOnly: "true",
			useTags: "true",
			openApiNullable: "false",
			skipDefaultInterface: "true",
			generatePom: "false",
			useBeanValidation: "false"
	]
}

sourceSets {
	generated {
		java.srcDir "${buildDir}/generated/sources/annotation/main/java"
		java.srcDir "${buildDir}/generate-resources/main/src/main/java"
	}

	main {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}

	test {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	generatedImplementation.extendsFrom implementation
	generatedRuntimeOnly.extendsFrom runtimeOnly
}

//compileGeneratedJava.dependsOn(tasks.openApiGenerate)
//compileJava.dependsOn(tasks.compileGeneratedJava)
tasks.withType(Pmd) {
	exclude '**/com/ptc/loyalty/api/gen/**/*.*'
}

test {
	useJUnitPlatform()
}
